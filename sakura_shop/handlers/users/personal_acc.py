from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from keyboards.inline.personal_acc_menu import *
from loader import dp, bot
from states.states import ShowOrderStatusState, PromoStates
from utils.db_api.db_commands import select_user, select_user_orders, update_bal, select_settings
from utils.nakrytka_api import order_status


@dp.callback_query_handler(text="personal_acc")
async def personal_acc(call: CallbackQuery):
    user = await select_user(call.from_user.id)
    await call.message.edit_caption(f"üñ•<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>\n"
                                    f"üÜî<i><b>–ú–æ–π ID:</b></i> <code>{call.from_user.id}</code>\n"
                                    f"<i><b>üõç–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫:</b></i>  <code>{user[1]}</code>\n"
                                    f"<i><b>üì•–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:</b></i> <code>{user[2]}</code>\n"
                                    f"<i><b>üíµ–ë–∞–ª–∞–Ω—Å:</b></i>  <code>{user[3]}</code>", reply_markup=personal_menu)


@dp.callback_query_handler(text="personal_acc", state="*")
async def personal_acc(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user = await select_user(call.from_user.id)
    await call.message.edit_caption(f"üñ•<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>\n"
                                    f"üÜî<i><b>–ú–æ–π ID:</b></i> <code>{call.from_user.id}</code>\n"
                                    f"<i><b>üõç–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫:</b></i>  <code>{user[1]}</code>\n"
                                    f"<i><b>üì•–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:</b></i> <code>{user[2]}</code>\n"
                                    f"<i><b>üíµ–ë–∞–ª–∞–Ω—Å:</b></i>  <code>{user[3]}</code>", reply_markup=personal_menu)


@dp.callback_query_handler(text="my_orders")
async def show_my_orders(call: CallbackQuery):
    orders = await select_user_orders(call.from_user.id)
    text = ""
    for order in orders:
        text += f"<code>{order[4]}</code> <b>|</b> <code>{order[1]}</code> " \
                f"<b>|</b> <code>{order[2]}</code> <b>|</b> <code>{order[3]}</code>\n"
    if text == "":
        await call.message.edit_caption("<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</b>", reply_markup=my_orders_menu)
    else:
        await call.message.edit_caption(f"<b>ID –ó–∞–∫–∞–∑–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | URL</b>\n{text}",
                                        reply_markup=my_orders_menu)


@dp.callback_query_handler(text="show_order_status")
async def show_order_status(call: CallbackQuery, state: FSMContext):
    await ShowOrderStatusState.SO1.set()
    await state.update_data(msg_to_edit=call.message)
    await call.message.edit_caption("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</b>")


@dp.message_handler(state=ShowOrderStatusState.SO1)
async def show_order_status(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    order = order_status(message.text)
    await message.delete()
    if order.get("error"):
        await msg_to_edit.edit_caption(f"<b>–ó–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                       parse_mode="HTML", reply_markup=my_orders_menu)
    else:
        status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if order['status'] == "Pending" else "–í—ã–ø–æ–ª–Ω–µ–Ω"
        await msg_to_edit.edit_caption(f"<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{message.text}</code>\n"
                                       f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> <code>{status}</code>\n"
                                       f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{order['remains']}</code>",
                                       reply_markup=my_orders_menu)
        await state.finish()


@dp.callback_query_handler(text="promo")
async def get_promo(call: CallbackQuery, state: FSMContext):
    msg_to_edit = await call.message.edit_caption("<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>", reply_markup=my_orders_menu)
    await PromoStates.P1.set()
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=PromoStates.P1)
async def receive_promo(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit = data.get("msg_to_edit")
    promo, settings = await select_promo(message.text), await select_settings()
    await message.delete()
    if promo:
        await add_activated_promo_count()
        await add_activated_promo_money(promo[1])
        await update_bal(message.from_user.id, promo[1])
        await del_promo(message.text)
        await msg_to_edit.edit_caption(f"<b>üî∞–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {promo[1]} —Ä—É–± –Ω–∞ –±–∞–ª–∞–Ω—Å</b>",
                                       reply_markup=my_orders_menu)
        await bot.send_message(settings[6], f"<b>üî∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
                                            f"<i>‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{message.from_user.username}\n"
                                            f"‚óΩÔ∏è–ê–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞:  {message.from_user.id}\n"
                                            f"‚óΩÔ∏è–°—É–º–º–∞: {promo[1]}\n"
                                            f"‚óΩÔ∏è–ü—Ä–æ–º–æ–∫–æ–¥: {promo[0]}</i>")
    else:
        await msg_to_edit.edit_caption(f"<b>–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
                                       reply_markup=my_orders_menu)
