from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery, Message

from filters import IsPrivate
from keyboards.inline.general_menu import *
from keyboards.reply.menu import main_menu_button
from loader import dp, bot
from states.states import SOSState
from utils.db_api.db_commands import *
from utils.other_utils import get_main_menu_pic


@dp.message_handler(commands=['show_id', 'id'])
async def bot_start(message: types.Message):
    await message.answer(f"ID —á–∞—Ç–∞: {message.chat.id}")


@dp.callback_query_handler(text="delete_this_message", state="*")
async def del_broadcast_msg(call: CallbackQuery):
    await call.message.delete()


@dp.callback_query_handler(text="show_main_menu", state="*")
async def show_main_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    photo, user = await get_main_menu_pic(), await select_user(call.from_user.id)
    await call.message.answer_photo(photo=photo,
                                    caption=f"<b>üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{0 if not user else user[3]}</code> RUB",
                                    reply_markup=main_menu(call.from_user.id))


@dp.message_handler(IsPrivate(), CommandStart())
async def bot_start(message: types.Message):
    settings, photo, user = await select_settings(), await get_main_menu_pic(), await select_user(message.from_user.id)
    await message.answer("<b>üè° –ú–µ–Ω—é</b>", reply_markup=main_menu_button)
    await message.answer_photo(photo=photo,
                               caption=f"<b>üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{0 if not user else user[3]}</code> RUB",
                               reply_markup=main_menu(message.from_user.id))
    if not user:
        ref_id = message.get_args()
        if ref_id:
            if ref_id != str(message.from_user.id):
                await add_user(message.from_user.id, ref_id)
                await bot.send_message(ref_id, f"<b><i>üéâ–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{message.from_user.username}</i></b>")
        else:
            await add_user(message.from_user.id)
        await bot.send_message(settings[4], f"<b><i>üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nüë§Username: @{message.from_user.username}\n"
                                            f"üÜîTelegram ID: {message.from_user.id}</i></b>")


@dp.message_handler(IsPrivate(), text="üè° –ú–µ–Ω—é", state="*")
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    photo, user = await get_main_menu_pic(), await select_user(message.from_user.id)
    await message.answer_photo(photo=photo, caption=f"<b>üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> "
                                                    f"<code>{0 if not user else user[3]}</code> RUB",
                               reply_markup=main_menu(message.from_user.id))


@dp.callback_query_handler(text="back_to_main_menu", state="*")
async def support(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user = await select_user(call.from_user.id)
    await call.message.edit_caption(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{0 if not user else user[3]}</code> RUB",
                                    reply_markup=main_menu(call.from_user.id))


@dp.callback_query_handler(text="info")
async def info(call: CallbackQuery):
    await call.message.edit_caption("<b>üî• –ù–∞—à –±–æ—Ç –ø—Ä–æ–¥–∞–µ—Ç –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–∫—Ä—É—Ç–∫–∞\n\n"
                                    "‚≠êÔ∏è –í—Å–µ–≥–¥–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
                                    "‚≠êÔ∏è –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É \n"
                                    "‚≠êÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
                                    "‚≠êÔ∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ \n"
                                    "‚≠êÔ∏è –ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–∞–ª–∏–¥–∞ \n\n"
                                    "üéâ –ü–æ–∫—É–ø–∞—è —É –Ω–∞—Å —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–∏–º!</b>",
                                    reply_markup=back_to_main_menu)


@dp.callback_query_handler(text="affiliate")
async def info(call: CallbackQuery):
    refs, bot_info, user = await select_all_refs(call.from_user.id), await bot.get_me(), await select_user(
        call.from_user.id)
    await call.message.edit_caption(f"<b><i>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
                                    f"üîó –°—Å—ã–ª–∫–∞: \n"
                                    f"<code>https://t.me/{bot_info.username}?start={call.from_user.id}</code>\n\nüë•"
                                    f" –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(refs)}\nüåÄ –ü—Ä–æ—Ü–µ–Ω—Ç: 10%\n"
                                    f"üí∏ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user[5]}‚ÇΩ\n\n"
                                    f"üî•–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ,"
                                    f" –≤–∞–º –¥–∞–¥—É—Ç 10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å!</i></b>",
                                    reply_markup=back_to_main_menu)


@dp.callback_query_handler(text="order_history")
async def show_info(call: CallbackQuery):
    await call.message.edit_caption(f"<b>üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b>",
                                    reply_markup=order_history_menu)


@dp.callback_query_handler(text_startswith="history:")
async def show_info(call: CallbackQuery):
    order_type = call.data.split(":")[1]
    orders = await select_user_orders(call.from_user.id, order_type)
    await call.message.edit_caption(f"üîñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                                    reply_markup=back_to_main_menu)
    for i in range(len(orders) - 1, len(orders) - 11, -1):
        try:
            if i < 0:
                break
            if order_type == "smm":
                await call.message.answer(f"üõí –°–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑:\n"
                                          f"üîó–°—Å—ã–ª–∫–∞: {orders[i][3]}\n"
                                          f"üìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orders[i][2]}\n"
                                          f"üì¶–£—Å–ª—É–≥–∞: {orders[i][1]}\n"
                                          f"üÜîID –ó–∞–∫–∞–∑–∞: {orders[i][4]}\n"
                                          f"üí≥–°–ø–∏—Å–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {orders[i][5]}")
            else:
                await call.message.answer(f"üõí –°–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑:\n"
                                          f"üì¶–¢–æ–≤–∞—Ä: {orders[i][1]}\n"
                                          f"üìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orders[i][2]}\n"
                                          f"üí≥–°–ø–∏—Å–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {orders[i][5]}")
        except IndexError:
            break


@dp.callback_query_handler(text="sos")
async def sos_message(call: CallbackQuery):
    await call.message.edit_caption("<b>üÜò –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª—É—á–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º—É –æ–±—Ä–∞—Ç–∏—Å—å –≤ –Ω–∞—à—É —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>",
                                    reply_markup=sos_menu)


@dp.callback_query_handler(text_startswith="sos:")
async def sos_message(call: CallbackQuery, state: FSMContext):
    mail_type = call.data.split(":")[1]
    mail = await select_mail(call.from_user.id)
    if not mail:
        await call.message.edit_caption("‚ùì–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–∏—Å–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏–ª–∏ –∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞:",
                                        reply_markup=back_to_main_menu)
        await SOSState.SS1.set()
        await state.update_data(message_to_edit=call.message, mail_type=mail_type)
    else:
        await call.answer("‚ùóÔ∏è–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                          show_alert=True)


@dp.message_handler(state=SOSState.SS1)
async def receive_msg(message: Message, state: FSMContext):
    msg, data = message.text, await state.get_data()
    msg_to_edit, mail_type = data.get("message_to_edit"), data.get("mail_type")
    await message.delete()
    await add_mail(message.from_user.id, mail_type, message.text)
    await msg_to_edit.edit_caption("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
                                   "üß≠–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-4 —á–∞—Å–∞", reply_markup=back_to_main_menu)
    await state.finish()
