import os
import random

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.inline.general_menu import back_to_main_menu
from keyboards.inline.catalog_menu import *

from loader import dp, bot
from states.states import CatalogStates
from utils.db_api.db_commands import select_user, update_bal, \
    insert_order, add_bought, select_item, add_wasted, update_order_count, \
    select_settings, select_product_subcategory, select_product_items, del_product_item, add_smm_bought
from utils.nakrytka_api import add_order

# ========================SHOW ALL CATEGORIES========================
from utils.other_utils import send_to_all_admins


@dp.callback_query_handler(text="catalog", state="*")
async def show_categories(call: CallbackQuery, state: FSMContext):
    await state.finish()
    item_type = "product"
    await call.message.edit_caption("<b><i>üíà–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i></b>",
                                    reply_markup=await category_menu(item_type))
    await CatalogStates.CS1.set()
    await state.update_data(item_type=item_type)


# ========================SHOW SMM CATEGORIES========================
@dp.callback_query_handler(text="smm_catalog", state="*")
async def show_categories(call: CallbackQuery, state: FSMContext):
    await state.finish()
    item_type = "smm"
    await call.message.edit_caption("<b><i>üíà–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i></b>",
                                    reply_markup=await category_menu(item_type))
    await CatalogStates.CS1.set()
    await state.update_data(item_type=item_type)


# ========================SHOW ALL SUBCATEGORIES FROM THIS CATEGORY========================
@dp.callback_query_handler(text_startswith="category:", state="*")
async def inside_category(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_type = data.get("item_type")
    category_name = call.data.split(":")[1]
    await CatalogStates.CS2.set()
    await state.update_data(category_name=category_name)
    await call.message.edit_caption("<b><i>üíà–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i></b>",
                                    reply_markup=await sub_category_menu(category_name, item_type))


# ========================SHOW ALL ITEMS FROM THIS SUBCATEGORY========================
@dp.callback_query_handler(text_startswith="subcategory:", state="*")
async def inside_category(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_name, item_type = data.get("category_name"), data.get("item_type")
    sub_id = call.data.split(":")[1]
    await CatalogStates.CS3.set()
    await state.update_data(sub_id=sub_id)
    if item_type == "smm":
        await call.message.edit_caption("<b><i>üíà–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:</i></b>",
                                        reply_markup=await items_menu(sub_id, category_name))
    else:
        subcategory = await select_product_subcategory(sub_id)
        items = await select_product_items(sub_id)
        await call.message.edit_caption(f"<b>üì¶–¢–æ–≤–∞—Ä: {subcategory[2]}\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üìú–û–ø–∏—Å–∞–Ω–∏–µ: \n{subcategory[3]}\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"‚ôªÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(items)}\n"
                                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                        f"üí≥–¶–µ–Ω–∞ –∑–∞ 1 —Ç–æ–≤–∞—Ä: {subcategory[4]} RUB</b>",
                                        reply_markup=await buy_product_menu(sub_id))


@dp.callback_query_handler(text_startswith="buy_product:", state="*")
async def buy_this_product(call: CallbackQuery, state: FSMContext):
    sub_id = call.data.split(":")[1]
    subcategory, items = await select_product_subcategory(sub_id), await select_product_items(sub_id)
    user = await select_user(call.from_user.id)
    if len(items) == 0:
        await call.answer("‚ùóÔ∏è–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    else:
        if user[3] > subcategory[4]:
            await CatalogStates.CS4.set()
            msg_to_edit = await call.message.edit_caption("<b>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>",
                                                          reply_markup=back_to_main_menu)
            await state.update_data(msg_to_edit=msg_to_edit)
        else:
            await call.answer("‚ùó–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")


@dp.message_handler(state=CatalogStates.CS4)
async def buy_this_product(message: Message, state: FSMContext):
    data = await state.get_data()
    sub_id, msg_to_edit, count = data.get("sub_id"), data.get("msg_to_edit"), message.text
    subcategory, items = await select_product_subcategory(sub_id), await select_product_items(sub_id)
    user, settings = await select_user(message.from_user.id), await select_settings()
    await message.delete()
    try:
        if len(items) >= int(count):
            if int(count) > 0:
                item, amount_to_pay = random.choice(items), subcategory[4] * int(count)
                await update_bal(message.from_user.id, -amount_to_pay)
                if subcategory[5] == "text":
                    await msg_to_edit.edit_caption(f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞!\n"
                                                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                   f"–í–∞—à —Ç–æ–≤–∞—Ä:\n"
                                                   f"{item[2]}</b>",
                                                   reply_markup=back_to_main_menu)
                else:
                    await msg_to_edit.edit_caption(f"<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞!\n"
                                                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                   f"üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                                   reply_markup=back_to_main_menu)
                    with open(item[2], "rb") as file:
                        doc = file.read()
                    await message.answer_document(doc)
                    os.remove(item[2])
                await del_product_item(item[3])
                await insert_order(user_id=message.from_user.id, item_name=subcategory[2], count=count, url=None,
                                   order_id=None, payed=amount_to_pay, order_type="product")
                await add_wasted(amount_to_pay)
                await update_order_count()
                await add_bought(message.from_user.id)
                await state.finish()
                await bot.send_message(settings[4], f"<b>üì¶ –°–¥–µ–ª–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞</b>\n\n"
                                                    f"<i>üßø–¢–æ–≤–∞—Ä: {subcategory[2]}\n"
                                                    f"‚ôªÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
                                                    f"üí≥–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount_to_pay}\n"
                                                    f"üëæ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                                    f"üÜîID: {message.from_user.id}</i>")
            else:
                await msg_to_edit.edit_caption("<b>‚ùóÔ∏è–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
                                               "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>",
                                               reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.edit_caption("<b>‚ùóÔ∏è–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏.\n"
                                           "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>",
                                           reply_markup=back_to_main_menu)
    except ValueError:
        await msg_to_edit.edit_caption("<b>‚ùóÔ∏è–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
                                       "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>",
                                       reply_markup=back_to_main_menu)


# ========================SHOW ITEM========================
@dp.callback_query_handler(text_startswith="item:", state="*")
async def inside_category(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_name, sub_id = data.get("category_name"), data.get("sub_id")
    item_name = call.data.split(":")[1]
    item = await select_item(item_name)
    await CatalogStates.CS4.set()
    await state.update_data(item=item)
    await call.message.edit_caption(f"{item[7]}\n\n<b><i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</i></b> <code>{item[4]}</code>\n"
                                    f"<b><i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</i></b> <code>{item[5]}</code>\n\n"
                                    f"<b><i>–¶–µ–Ω–∞ –∑–∞ {item[4]}:</i></b> <code>{item[3]}</code>",
                                    reply_markup=in_item_menu(item_name, sub_id))


@dp.callback_query_handler(text="calc", state=CatalogStates.CS4)
async def calc(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item = data.get("item")

    msg_to_edit = await call.message.edit_caption(f"üí≥–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã:",
                                                  reply_markup=await calc_menu(item[8]))
    await state.update_data(msg_to_edit=msg_to_edit)


@dp.message_handler(state=CatalogStates.CS4)
async def calc(message: Message, state: FSMContext):
    data = await state.get_data()
    item, msg_to_edit = data.get("item"), data.get("msg_to_edit")
    user = await select_user(message.from_user.id)
    await message.delete()
    try:
        num = int(message.text)
        if item[5] >= num > 0:
            if num >= item[4]:
                cost = round(item[3] / item[4] * num)
                balance_after_pay = user[3] - cost
                if user[3] >= cost:
                    await msg_to_edit.edit_caption(f"<b><i>üí∞–í–∞—à –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: {user[3]}\n"
                                                   f"üí≥–°–ø–∏—à–µ—Ç—Å—è: {cost}\n"
                                                   f"üí∏–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {balance_after_pay}</i></b>",
                                                   reply_markup=await calc_menu(item[8]))
                    await state.finish()
                else:
                    await msg_to_edit.edit_caption(f"<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>",
                                                   reply_markup=await calc_menu(item[8]))
            else:
                await msg_to_edit.edit_caption(f"<b>–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—É–∫–∞–∑–∞–Ω–Ω–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ),"
                                               f" –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>", reply_markup=await calc_menu(item[8]))
        else:
            await msg_to_edit.edit_caption(f"<b>–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                                           f"(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏ –ø—Ä–∏–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ)"
                                           f", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>", reply_markup=await calc_menu(item[8]))

    except ValueError:
        await msg_to_edit.edit_caption(f"<b>–ù–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä),"
                                       f" –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>", reply_markup=await calc_menu(item[8]))


# ========================BUY SELECTED ITEM========================
# ASK FOR COUNT
@dp.callback_query_handler(text_startswith="buy_this_item:", state=CatalogStates.CS4)
async def buy(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item = data.get("item")
    user = await select_user(call.from_user.id)
    cost = item[3] / item[4]
    amount = round(user[3] / cost)
    await call.message.edit_caption(f"<b>‚úîÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <code>{item[0]}</code>\n\n"
                                    f"üí∞–í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: <code>{amount}</code>\n\n"
                                    f"üëâ–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>", reply_markup=back_to_main_menu)
    await state.update_data(msg_to_edit=call.message)
    await CatalogStates.CS5.set()


# ASK FOR URL
@dp.message_handler(state=CatalogStates.CS5)
async def receive_count(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, item = data.get("msg_to_edit"), data.get("item")
    await message.delete()
    try:
        count = int(message.text)
        user = await select_user(message.from_user.id)
        if item[4] <= count <= item[5]:
            count_to_pay = round(item[3] / item[4] * count)
            if count_to_pay <= user[3]:
                await state.update_data(count=count, count_to_pay=count_to_pay)
                await msg_to_edit.edit_caption(
                    f"<b>‚ô¶Ô∏è–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n\n"
                    f"üí∞–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: <code>{count_to_pay}</code> Rub\n\n"
                    f"üí∞–í–∞—à –±–∞–ª–∞–Ω—Å —Å—Ç–∞–Ω–µ—Ç: <code>{user[3] - count_to_pay}</code> Rub\n\n"
                    f"üëâ–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:</b>",
                    parse_mode="HTML", reply_markup=back_to_main_menu)
                await CatalogStates.CS6.set()
            else:
                await msg_to_edit.edit_caption(f"<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.</b>\n"
                                               f"<code>–û—Ç {item[4]} –¥–æ {item[5]}</code>\n"
                                               f"–¶–µ–Ω–∞ –∑–∞ {item[4]}: <code>{item[3]}</code>\n"
                                               f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞</b>‚§µ",
                                               parse_mode="HTML", reply_markup=back_to_main_menu)
        else:
            await msg_to_edit.edit_caption(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ/–±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ.</b>\n"
                                           f"<code>–û—Ç {item[4]} –¥–æ {item[5]}</code>\n"
                                           f"–¶–µ–Ω–∞ –∑–∞ {item[4]}: <code>{item[3]}</code>\n"
                                           f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞</b>‚§µ",
                                           parse_mode="HTML", reply_markup=back_to_main_menu)
    except ValueError:
        await msg_to_edit.edit_caption(f"<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>"
                                       f"<code>–û—Ç {item[4]} –¥–æ {item[5]}</code>\n"
                                       f"–¶–µ–Ω–∞ –∑–∞ {item[4]}: <code>{item[3]}</code>\n"
                                       f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞</b>‚§µ",
                                       parse_mode="HTML", reply_markup=back_to_main_menu)


# START THIS ORDER
@dp.message_handler(state=CatalogStates.CS6)
async def receive_count(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, count_to_pay, item = data.get("msg_to_edit"), int(data.get("count_to_pay")), data.get("item")
    count, settings = data.get("count"), await select_settings()
    url = message.text
    await message.delete()
    if "http" in url:
        await msg_to_edit.edit_caption(f"<b>‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ‚ö†Ô∏è\n\n"
                                       f"üîó–°—Å—ã–ª–∫–∞: <code>{url}</code>\n"
                                       f"‚ô¶Ô∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{count}</code>\n\n"
                                       f"üî•–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!</b>",
                                       reply_markup=accept_order_menu)
        await state.update_data(url=url)
        await CatalogStates.next()
    else:
        await msg_to_edit.edit_caption(f"<b>–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
                                       reply_markup=back_to_main_menu)


# START THIS ORDER
@dp.callback_query_handler(state=CatalogStates.CS7, text_startswith="order_a:")
async def receive_count(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_to_edit, count_to_pay, item = data.get("msg_to_edit"), int(data.get("count_to_pay")), data.get("item")
    count, url = data.get("count"), data.get("url")
    user, settings = await select_user(call.from_user.id), await select_settings()
    bal_past = user[3]
    await call.message.delete()
    with open("main_menu.jpg", "rb") as file:
        photo = file.read()
    if call.data.split(":")[-1] == "accept":
        try:
            request = add_order(item[6], url, count)
            if request.get("error") == "You have active order with this link. Please wait until " \
                                       "order being completed.":
                await call.message.answer_photo(photo=photo, caption=f"<b>‚úÖ–ù–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.</b>\n"
                                                                     f"–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω.",
                                                parse_mode="HTML", reply_markup=back_to_main_menu)
            else:
                await call.message.answer_photo(photo=photo, caption=f"<b>‚úÖ–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
                                                                     f"üîë–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - <code>{request['order']}</code>\n"
                                                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                                     f"‚ù§Ô∏è–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å</b>",
                                                reply_markup=after_order_menu)
                await update_bal(call.from_user.id, -count_to_pay)
                await add_wasted(count_to_pay)
                await update_order_count()
                await add_smm_bought()
                await add_bought(call.from_user.id)
                await insert_order(user_id=call.from_user.id, item_name=item[0], count=count, url=url,
                                   order_id=request['order'], payed=count_to_pay, order_type="smm")
                user = await select_user(call.from_user.id)
                await bot.send_message(settings[4], f"""              
<b>üõí –ö—É–ø–ª–µ–Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫–∞</b>

<i>‚óΩÔ∏è–°—Å—ã–ª–∫–∞: {url}
‚óΩÔ∏è–¶–µ–Ω–∞: {count_to_pay}
‚óΩÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}
‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}
‚óΩÔ∏è–ê–π–¥–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞: {call.from_user.id}
‚óΩÔ∏è–ë–∞–ª–∞–Ω—Å –±—ã–ª: {bal_past}
‚óΩÔ∏è–ë–∞–ª–∞–Ω—Å —Å—Ç–∞–ª: {user[3]}
‚óΩÔ∏è–£—Å–ª—É–≥–∞: {item[0]}
‚óΩÔ∏è–ê–π–¥–∏ —É—Å–ª—É–≥–∏: {item[8]}</i>
""")
        except KeyError:
            await call.message.answer_photo(photo=photo, caption=f"<b>–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,"
                                                                 f" –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω.</b>",
                                            reply_markup=back_to_main_menu)
            await bot.send_message(settings[6], f"üìõ–û–®–ò–ë–ö–êüìõ\n"
                                                f"–ß–µ–ª–æ–≤–µ–∫ @{call.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑:\n"
                                                f"–£—Å–ª—É–≥–∞: {item[0]}\n"
                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n"
                                                f"–°—Å—ã–ª–∫–∞: {url}\n"
                                                f"–ù–æ –Ω–∞ —Å—á–µ—Ç—É api –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                                                f"<b>–ë–∞–ª–∞–Ω—Å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω.</b>")
            await state.finish()
